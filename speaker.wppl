var successValue= 100
// var actions = ["speak", "point"];
var actions = ["speak", "point", "teach"];

// implicit points version
var utility = function(outcome, implicit_click_points, implicit_label_points) {
  var table = { 
    point_success: implicit_click_points, 
    speak_success: implicit_label_points,
    failure_speaker: 0,
    failure_receiver: 0,
    teach_success: 102,
    teach_failure: 0,
  };
  // return table[outcome];
  return Math.log(table[outcome]+.01);
};

// // explicit points version of utiltiy function
// var utility = function(outcome, pointCost, speechCost) {
//   var table = { 
//     point_success: successValue - pointCost, 
//     speak_success: successValue - speechCost,
//     failure_speaker: 0,
//     failure_receiver: 0,
//     teach_success: successValue - speechCost - pointCost,
//     teach_failure: 0,
//   };
//   // return table[outcome];
//   return Math.log(table[outcome]+.01);
// };

var unknownProb = function(times, prob) {
  Binomial({p:prob, n:times}).score(0)
}

var knownProb = function(times, prob) {
  Math.log(1-Math.exp(unknownProb(times, prob)))
}

var vocabProb = function(vocabulary, prob) {
  var totalProb = map(function(word) {
    word.known ? knownProb(word.exposures, prob) :
     unknownProb(word.exposures, prob)
  }, vocabulary)

  return sum(totalProb)
} 



var initializeVocab = function(trials, learnProb, partnerExposure, truePerfect=0) {
  var learnedArray = []

  map(function(element) {
    var inferredPartnerExposures = Math.floor(element.exposures*partnerExposure)
    var newWord = {
      label: element.label,
      exposures: inferredPartnerExposures,
      // known: inferredPartnerExposures==0 ? 0 : Math.exp(knownProb(inferredPartnerExposures, learnProb))
      // use below line to initialize a partner with perfect knowledge in the 'twice as much' exposure condition
      known: inferredPartnerExposures==0 ? 0 : 
        partnerExposure==.5 ? Math.exp(knownProb(inferredPartnerExposures, learnProb)) :
          partnerExposure==2 ? truePerfect==1 ? 1 : Math.exp(knownProb(inferredPartnerExposures, learnProb)) :
            null

     };
     learnedArray.push(newWord)
  }, trials)
  return learnedArray
}

var wordFromVocab = function(word, vocabulary) {
  var vocabIndex = _.findIndex(vocabulary, {label: word});
  return vocabulary[vocabIndex];
}


var training = function(trials, learnProb) {

  map(function(trial) {
    var isknown = sample(Bernoulli({p: learnProb, n:trial.exposures}))

    return {label: trial.label, exposures: trial.exposures, known: isknown}
  }, trials) 

}




var estimateLearnProb = function(vocabulary) {
  Infer({ method: 'MCMC', samples: 10000, burn:2000,
  //Infer({  
    model() {
      var parameter = sample(Beta({a:.5,b:.5}));
      factor(vocabProb(vocabulary, parameter))

      //condition(sameVocabulary(vocabulary, learnSample));
      return parameter;
    }
  })
}



var selectReferent = function(modality, referent, speakerVocab, receiverVocab) {
  if(modality == "point") {return "point_success";}

  else {
    //get all known items from receiverVocab
    var speakerKnows = filter(function(x) {return x.label == referent}, speakerVocab)[0].known

    if(!speakerKnows) {
      return "failure_speaker"
    }
    else {
      var receiverKnows = filter(function(x) {return x.label == referent}, receiverVocab)[0].known
      //check if referent known in vocab

      if(modality == "teach") {
        return "teach_success"
      } else {
        return(categorical([receiverKnows, 1-receiverKnows], ["speak_success", "failure_receiver"]));
      }
    }
  }
}

var sampleSpeaker = function(speakerVocab, receiverVocab, target) {
  return Infer({ 
    model() {

      var action = uniformDraw(actions);
      
      var expectedUtility = function(action) {
        return expectation(Infer({ 
          model() {
            return utility(selectReferent(action, target, speakerVocab, receiverVocab));
          }
        }));
      };
      
      factor(Math.log(expectedUtility(action)));
      
      return action
    }
  });
};

var saveUpdates = function(speakerVocab, receiverVocab, action, target, newArray, repeats) {

  var newOutcome = selectReferent(action, target, speakerVocab, receiverVocab)
  var newVocab = updateVocab(receiverVocab, target, newOutcome)
  var newUpdate = {
    outcome: newOutcome,
    vocab: newVocab
  }
  newArray.push(newUpdate)

  if(repeats>1) {
    saveUpdates(speakerVocab, newVocab, action, target, newArray, repeats-1)
  } else {
    return newArray
  }
}

// var utilityRecursive = function(trials, target, outcome, speakerVocab, receiverVocab, updates, appearanceNumber, estimatedLearnProb) {
//   var trialArray = trials.slice()
//   var utilityUpdated = utility(outcome)
//   var targetIndex= _.indexOf(trialArray, target)
//   trialArray.splice(targetIndex, 1)
  
//   if(_.indexOf(trialArray, target)>=0){
//     return utilityUpdated + expectation(Infer({ model() {
//       var nextAction = uniformDraw(actions)
//       var nextOutcome = selectReferent(nextAction, target, speakerVocab, receiverVocab)
//       var nextVocab = updateVocab(receiverVocab, target, nextOutcome, estimatedLearnProb)
//       utilityRecursive(trialArray, target, nextOutcome, speakerVocab, nextVocab, updates, appearanceNumber+1)
//     }}))
//   } else {
//     return  utilityUpdated
//   }
// };

var expDiscount = function(delay) {
  return Math.pow(0.5, delay); 
};


var sampleSpeakerPlanner = function() {
  // var receiverVocab = receiverVocab.slice()

  var act = function(speakerVocab, receiverVocab, someTrials, target, delay, estimatedLearnProb, pointCost, speechCost, perfectTeaching) {

    return Infer({ model() {

      var action = uniformDraw(actions);
      var eu = expectedUtility(action, target, speakerVocab, receiverVocab, someTrials, delay, estimatedLearnProb, pointCost, speechCost, perfectTeaching);
      // factor(Math.log(eu));
       factor(2*eu)
      return action;
    }});
  }

  var expectedUtility = function(action, target, speakerVocab, receiverVocab, someTrials, delay, estimatedLearnProb, pointCost, speechCost, perfectTeaching) {
    var outcome = selectReferent(action, target, speakerVocab, receiverVocab)
    var util = (utility(outcome, pointCost, speechCost)) * expDiscount(delay)

    var index = _.indexOf(someTrials, target);
    var restOfTrials = (index < someTrials.length -1) ? someTrials.slice(index+1): [];
    // var newIndex = _.indexOf(restOfTrials, target);
    var newDelay= delay + 1
    // if(any(function(x) {x==target}, restOfTrials)){
    if(index == -1){
      return util;
    } else {
      return util + expectation(Infer({ model() {
        var updatedReceiver = updateVocab(receiverVocab, target, outcome, estimatedLearnProb, perfectTeaching)
        var nextAction = sample(act(speakerVocab, updatedReceiver, restOfTrials, target, newDelay, estimatedLearnProb, pointCost, speechCost, perfectTeaching))
        return expectedUtility(nextAction, target, speakerVocab, updatedReceiver, restOfTrials, newDelay, estimatedLearnProb, pointCost, speechCost, perfectTeaching)
      }}));
    }
  }

  return { act };

};



//   return mapIndexed(function(index, element){

//     // if(index < someTrials.length) {
      
//       // var element= restOfTrials[0]
//       return Infer({ 
//         model() {
//           var action = uniformDraw(actions);
//           var updates = saveUpdates(speakerVocab, receiverVocab, action, element, [], 3)
//           var expectedUtility = function(action) {
//             return expectation(Infer({ 
//               model() {
//                 var outcome1 = selectReferent(action, element, speakerVocab, receiverVocab)
//                   // var outcome1 = updates[appearanceNumber].outcome
//                   // var outcome1 = updates[0].outcome
//                 var updatedReceiver = updateVocab(receiverVocab, element, outcome1)
//                 return utilityRecursive(restOfTrials, element, outcome1, speakerVocab, updatedReceiver, updates, 0);
//               }
//             }));
//           };
          
//           factor(Math.log(expectedUtility(action)));
//           return action
//         }
//       });

//     //   sampleSpeakerPlanner(speakerVocab, receiverVocab, someTrials, index+1)
//     // } else {
//     //   // return receiverVocab
//     // }

//   }, someTrials) 
// };


var findWordandUpdate = function(word, vocab, changingKnownTo) {
  var vocabIndex = _.findIndex(vocab, {label: word});
  var newWord = {
    label: vocab[vocabIndex].label,
    exposures: vocab[vocabIndex].exposures,
    known: changingKnownTo
   };
  vocab.splice(vocabIndex, 1, newWord) 
  return vocab
}

var updateVocab = function(receiverVocab, referent, outcome, estimatedProb = 0, perfectTeaching=0) {
  var otherVocab=receiverVocab.slice()
  if(outcome=="speak_success") {
    findWordandUpdate(referent, otherVocab, 1)
  } 
  if(outcome=="failure_receiver") {
   findWordandUpdate(referent, otherVocab, 0)
  }
  if(outcome=="teach_success") {
    var targExp =  _.filter(otherVocab, {label: referent})[0].exposures
    // can set this update to 1, perfect knowledge, to reflect assumption that teaching is perfect
    perfectTeaching!=0 ? findWordandUpdate(referent, otherVocab, 1) :
      findWordandUpdate(referent, otherVocab, Math.exp(knownProb(targExp+1, estimatedProb)))
  }
  // in all other cases, no need to alter because outcome is uninformative
  return otherVocab
}



var unknownReceiver = function(target, myVocab) {
  var estimatedLearnProb = expectation(estimateLearnProb(myVocab));

  var receiverVocab = training(trials, estimatedLearnProb);

  return sample(sampleSpeaker(myVocab, receiverVocab, target));
}



// -------------------------------------------------------
var wordList = ["blicket", "kreeb", "wug",  "fep", 
                        "toma", "dax", "gazzer", "kiv","manu"];

var freqList = [4, 4, 4, 2, 2, 2, 1, 1, 1];

// var trainingTrials = map2(function(word, freq) {return {label: word, exposures: freq} }, wordList, freqList)

var gameTrials = ["blicket","blicket","blicket", "kreeb","kreeb","kreeb", "wug","wug","wug", "fep","fep","fep", 
                        "toma","toma","toma", "dax","dax","dax", "gazzer","gazzer","gazzer", "kiv","kiv","kiv",
                        "manu","manu","manu"];

var testingTrials = ["wug", "wug"];


var ldfs = _.uniq(
  map(function(element) {
    return element.ldf_num
  }, empiricalVocabs)
)

var ldfs_test = filter(function(subID) {return subID <= 3}, ldfs)


map(function(x) {
  var myVocab = _.filter(empiricalVocabs, {ldf_num : x})
  // var speechCost = myVocab[1].speechCost
  // var pointCost = myVocab[1].pointCost
  var pointCost = myVocab[1].click_points
  var speechCost = myVocab[1].label_points
  var implicit_teach_points = myVocab[1].label_click
// return myVocab
  var successValue = 100

  var me = x
  var utilityCondition = myVocab[1].condition

  var learnPs = estimateLearnProb(myVocab)
  // return speechCost
  // return {learnPs}
  var estimatedProb = expectation(learnPs)
  // var estimatedProb = 0
  var partnersExposure = myVocab[1].partnersExposure
  var yourVocab = initializeVocab(myVocab, estimatedProb, partnersExposure)


  // var vocabProb = map(function(element) {(sampleSpeaker(myVocab, yourVocab, element.label))},
      // myVocab)
  // return vocabProb
  // var tmp = (sampleSpeaker(myVocab, yourVocab, 'wug'))
  // return {tmp}

  // return utilityRecursive(gameTrials, 'toma', 'speak', myVocab, yourVocab, 0, saveUpdates(myVocab, yourVocab, 'speak', 'toma', [], 4), 0)
  // return repeat(10, function() {selectReferent('speak', 'toma',  myVocab, yourVocab)})

                // var updates = saveUpdates(myVocab, yourVocab, 'speak', 'toma', [], 3)
                // return updates[0].outcome
  // return repeat(10, function() {utility(selectReferent('speak', 'manu', myVocab, yourVocab, estimatedProb))})
  var act = sampleSpeakerPlanner().act;

  // var act6 = act(myVocab, yourVocab, ["wug","wug","wug","wug", "wug","wug"], "wug", 0, estimatedProb)
  // var act3 = act(myVocab, yourVocab, ["wug","wug","wug"], "wug", 0, estimatedProb)
  // var act2 = act(myVocab, yourVocab, ["wug", "wug"], "wug", 0, estimatedProb)
  // var act1 = act(myVocab, yourVocab, ["wug"], "wug", 0, estimatedProb)

  // return {act3, act2, act1}


  var predictingTrials = function(remainingTrials, yourVocab, startingArray, perfectTeaching=0) {
    var element = remainingTrials.shift()
    var act_dist = act(myVocab, yourVocab, remainingTrials, element, 0, estimatedProb, pointCost, speechCost, perfectTeaching)
    var action = sample(act_dist)
    var outcome = selectReferent(action, element, myVocab, yourVocab)
    var newVocab = updateVocab(yourVocab, element, outcome, estimatedProb, perfectTeaching) 
    // var act_dist = newVocab
    startingArray.push(action)
    if(remainingTrials.length> 0){
      predictingTrials(remainingTrials,newVocab,startingArray, perfectTeaching)
    } else {return startingArray}
  }

  var predictions = predictingTrials(gameTrials.slice(), yourVocab, [])
  // var predictions = predictingTrials(["wug", "wug", "wug", "wug", "wug", "wug"], yourVocab, [])

  var pred_perf_teaching = predictingTrials(gameTrials.slice(), yourVocab, [], 1)

  // var yourVocab_perf = initializeVocab(myVocab, estimatedProb, partnersExposure, 1)
  // var pred_perf_partner = predictingTrials(gameTrials.slice(), yourVocab_perf, [], 1)

  return {predictions, pred_perf_teaching, gameTrials, myVocab, yourVocab, me, utilityCondition, partnersExposure, estimatedProb}

// return  gameTrials.map(function(currentValue, index){return index})
   // return gameTrials.slice(_.indexOf(gameTrials, 'toma'))
  // map(function(element) {updateVocab(myVocab, yourVocab, element)}, wordList)
  // return yourVocab
    // var vocabProb = map(function(element) {(sampleSpeaker(myVocab, yourVocab, element.label))},
    //   myVocab)
    // return vocabProb

  // return repeat(3,function() {selectReferent("speak", "dax", myVocab, yourVocab)})
}, ldfs)


// // var myVocab = _.filter(empiricalVocabs, {ldf_num : 1})

